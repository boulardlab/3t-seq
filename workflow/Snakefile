from pathlib import Path
from pprint import pprint as pp
from datetime import datetime
from urllib.parse import urlparse

import re
import pandas as pd

##########################
## PIN SNAKEMAKE VERSION
##########################

from snakemake.utils import min_version

min_version("7.21.0")


################
## CONFIG FILE
################


configfile: "config/config.yaml"


#############################
## INCLUDE COMMON FUNCTIONS
#############################


include: "rules/common.smk"


#######################
## DEFINE VARIABLES
#######################


date = datetime.now()
timestamp = date.strftime("%Y-%m-%d")
log_folder = Path(config["globals"]["log_folder"])
log_folder = log_folder.joinpath(timestamp)

data_folder = Path(config["globals"]["results_folder"])
qc_folder = Path(config["globals"]["qc_folder"])
reads_folder = Path(config["globals"]["reads_folder"])
references_folder = Path(config["globals"]["references_folder"])
tmp_folder = Path(config["globals"]["tmp_folder"])
analysis_folder = Path(config["globals"]["analysis_folder"])

raw_reads_folder = reads_folder
trim_reads_folder = data_folder.joinpath("trim")
rdata_folder = analysis_folder.joinpath("rdata")
pictures_folder = analysis_folder.joinpath("pictures")
tables_folder = analysis_folder.joinpath("tables")
notebooks_folder = analysis_folder.joinpath("notebooks")

fastqc_raw_folder = qc_folder.joinpath("fastqc-raw")
fastqc_trim_folder = qc_folder.joinpath("fastqc-trimmed")
fastqc_markdup_folder = qc_folder.joinpath("fastqc-markdup")
fastqc_star_folder = qc_folder.joinpath("star")

multiqc_folder = qc_folder.joinpath("multiqc")
multiqc_raw_folder = multiqc_folder.joinpath("raw")
multiqc_trim_folder = multiqc_folder.joinpath("trim")
multiqc_star_folder = multiqc_folder.joinpath("star")
multiqc_markdup_folder = multiqc_folder.joinpath("markdup")

alignments_folder = data_folder.joinpath("alignments")
star_folder = alignments_folder.joinpath("star")
markdup_folder = alignments_folder.joinpath("star_markdup")
starTE_folder = alignments_folder.joinpath("starTE")
salmonTE_folder = data_folder.joinpath("salmonTE")
trna_coverage_folder = data_folder.joinpath("tRNA_coverage")
deseq2_working_directory = Path(config["deseq2"]["working_directory"])
deseq2_notebook_input_path = Path(config["deseq2"]["notebook_path"])

## Generate paths for sequence data from links
fasta_path = references_folder.joinpath(
    get_filename(config["genome"]["fasta_url"], decompress=True)
)

gtf_path = references_folder.joinpath(
    get_filename(config["genome"]["gtf_url"], decompress=True)
)

rmsk_path =  references_folder.joinpath("rmsk.gtf")
rmsk_bed = Path(str(rmsk_path).replace("gtf", "bed"))

gaf_path = references_folder.joinpath(
    get_filename(config["genome"]["gaf_url"], decompress=False)
)

tRNA_annotation_dir = references_folder.joinpath("gtrnadb")

## Get samples
libraries = config["sequencing_libraries"]
samples = {"single": {}, "paired": {}}
for library in libraries:
    libname = library["name"]
    sample_sheet = pd.read_csv(library["sample_sheet"])
    protocol = "pe" if "filename_2" in sample_sheet.columns else "se"

    if protocol == "pe":
        filelist = sample_sheet.filename_1.tolist()
        samples["paired"][libname] = [re.sub(r"_1(?:_sequence)?", "", x) for x in filelist]
    else:
        filelist = sample_sheet.filename.tolist()
        samples["single"][libname] = filelist

    if any([re.match(".*.f(?:ast)?q(?:.gz)?$", x) for x in filelist]):
        raise NameError(
            "Filenames should not contain extensions. Remove .fastq.gz or .fq.gz from the filename column(s)."
        )

library_names_single = list(samples["single"].keys())
library_names_paired = list(samples["paired"].keys())

supported_extensions = ["fq", "fq.gz", "fastq", "fastq.gz"]
supported_suffixes = [
    ("_1", "_2"),
    ("_R1", "_R2"),
    ("_1_sequence", "_2_sequence"),
]


####################
## ONSTART BLOCK
####################

## These folders will be create at the beginning of the pipeline
init_folders = [
    log_folder,
    reads_folder,
    raw_reads_folder,
    trim_reads_folder,
    multiqc_folder,
    alignments_folder,
    references_folder,
    tmp_folder,
    star_folder,
    starTE_folder,
    salmonTE_folder,
    tables_folder,
    pictures_folder,
    notebooks_folder,
]


onstart:
    import json
    from rich import print_json

    for folder in init_folders:
        mkdir(folder)

    print_json(json.dumps(config))

    print_json(json.dumps(samples))


#############
## WORKFLOW
#############


wildcard_constraints:
    se_serie="|".join(library_names_single),
    pe_serie="|".join(library_names_paired),
    method="multihit|random",


include: "rules/download-references.smk"
include: "rules/fastqc.smk"
include: "rules/trim_single.smk"
include: "rules/star.smk"
include: "rules/deseq2.smk"
include: "rules/salmonTE.smk"
include: "rules/starTE.smk"
include: "rules/filter_bam.smk"
# include: "rules/gtf2bed.smk"
include: "rules/picard_markdup.smk"
include: "rules/make_bw.smk"
include: "rules/coverage_tRNA.smk"


rule all:
    input:
        # MultiQC reports at different steps
        expand(
            multiqc_raw_folder.joinpath("{serie}", "multiqc_report.html"),
            serie=library_names_single + library_names_paired,
        ),
        expand(
            multiqc_trim_folder.joinpath("{serie}", "multiqc_report.html"),
            serie=library_names_single + library_names_paired,
        ),
        expand(
            multiqc_star_folder.joinpath("{serie}", "multiqc_report.html"),
            serie=library_names_single + library_names_paired,
        ),
        expand(
            multiqc_markdup_folder.joinpath("{serie}", "multiqc_report.html"),
            serie=library_names_single + library_names_paired,
        ),
        # DESeq2 flags
        expand(
            rdata_folder.joinpath("deseq2/{serie}/dds.rds"),
            serie=library_names_single + library_names_paired,
        ),
        expand(
            analysis_folder.joinpath("datavzrd", "{serie}", "datavzrd"),
            serie=library_names_single + library_names_paired,
        ),
        # SalmonTE results folders
        expand(
            data_folder.joinpath("salmonTE/de_analysis/{se_serie}"),
            se_serie=library_names_single,
        ),
        expand(
            data_folder.joinpath("salmonTE/de_analysis/{pe_serie}"),
            pe_serie=library_names_paired,
        ),
        # FeatureCounts tables from STAR-TE
        expand(
            starTE_folder.joinpath("{se_serie}/featureCount/{method}.txt"),
            se_serie=library_names_single,
            method=["multihit", "random"],
        ),
        expand(
            starTE_folder.joinpath("{pe_serie}/featureCount/{method}.txt"),
            pe_serie=library_names_paired,
            method=["multihit", "random"],
        ),
        expand(
            starTE_folder.joinpath("{serie}", "random", "datavzrd"),
            serie=library_names_single + library_names_paired,
        ),
        # Bigwig files
        get_bw,
        # tRNA coverage files
        expand(
            trna_coverage_folder.joinpath("{serie}", "tRNA_lfc.txt"),
            serie=library_names_paired + library_names_single,
        ),
        expand(trna_coverage_folder.joinpath("{serie}", "datavzrd"),
            serie=library_names_paired + library_names_single
        )
